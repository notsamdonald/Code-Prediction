Module FunctionDef arguments arg train_dir arg model_save_path arg n_neighbors arg knn_algo arg verbose Constant None Constant None Constant ball_tree Constant False Expr Constant Assign Name X List Assign Name y List For Name class_dir Call Attribute Name os Name train_dir If UnaryOp Not Call Attribute Attribute Name os Call Attribute Attribute Name os Name train_dir Name class_dir Continue For Name img_path Call Name Call Attribute Attribute Name os Name train_dir Name class_dir Assign Name image Call Attribute Name face_recognition Name img_path Assign Name face_bounding_boxes Call Attribute Name face_recognition Name image If Compare Call Name len Name face_bounding_boxes NotEq Constant 1 If Name verbose Expr Call Name print Call Attribute Constant Name img_path IfExp Compare Call Name len Name face_bounding_boxes Lt Constant 1 Constant Didn't find a face Constant Expr Call Attribute Name X Subscript Call Attribute Name face_recognition Name image keyword Name face_bounding_boxes Constant 0 Expr Call Attribute Name y Name class_dir If Compare Name n_neighbors Is Constant None Assign Name n_neighbors Call Name int Call Name round Call Attribute Name math Call Name len Name X If Name verbose Expr Call Name print Constant Name n_neighbors Assign Name knn_clf Call Attribute Name neighbors keyword Name n_neighbors keyword Name knn_algo keyword Constant distance Expr Call Attribute Name knn_clf Name X Name y If Compare Name model_save_path IsNot Constant None With withitem Call Name open Name model_save_path Constant wb Name f Expr Call Attribute Name pickle Name knn_clf Name f Return Name knn_clf
Module FunctionDef arguments arg X_img_path arg knn_clf arg model_path arg distance_threshold Constant None Constant None Constant 0.6 Expr Constant If BoolOp Or UnaryOp Not Call Attribute Attribute Name os Name X_img_path Compare Subscript Subscript Call Attribute Attribute Name os Name X_img_path Constant 1 Slice Constant 1 NotIn Name ALLOWED_EXTENSIONS Raise Call Name Exception Call Attribute Constant Name X_img_path If BoolOp And Compare Name knn_clf Is Constant None Compare Name model_path Is Constant None Raise Call Name Exception Constant If Compare Name knn_clf Is Constant None With withitem Call Name open Name model_path Constant rb Name f Assign Name knn_clf Call Attribute Name pickle Name f Assign Name X_img Call Attribute Name face_recognition Name X_img_path Assign Name X_face_locations Call Attribute Name face_recognition Name X_img If Compare Call Name len Name X_face_locations Eq Constant 0 Return List Assign Name faces_encodings Call Attribute Name face_recognition Name X_img keyword Name X_face_locations Assign Name closest_distances Call Attribute Name knn_clf Name faces_encodings keyword Constant 1 Assign Name are_matches ListComp Compare Subscript Subscript Subscript Name closest_distances Constant 0 Name i Constant 0 LtE Name distance_threshold comprehension Name i Call Name range Call Name len Name X_face_locations Return ListComp IfExp Name rec Tuple Name pred Name loc Tuple Constant unknown Name loc comprehension Tuple Name pred Name loc Name rec Call Name zip Call Attribute Name knn_clf Name faces_encodings Name X_face_locations Name are_matches
Module FunctionDef arguments arg img_path arg predictions Expr Constant Assign Name pil_image Call Attribute Call Attribute Name Image Name img_path Constant RGB Assign Name draw Call Attribute Name ImageDraw Name pil_image For Tuple Name name Tuple Name top Name right Name bottom Name left Name predictions Expr Call Attribute Name draw Tuple Tuple Name left Name top Tuple Name right Name bottom keyword Tuple Constant 0 Constant 0 Constant 255 Assign Name name Call Attribute Name name Constant UTF-8 Assign Tuple Name text_width Name text_height Call Attribute Name draw Name name Expr Call Attribute Name draw Tuple Tuple Name left BinOp BinOp Name bottom Sub Name text_height Sub Constant 10 Tuple Name right Name bottom keyword Tuple Constant 0 Constant 0 Constant 255 keyword Tuple Constant 0 Constant 0 Constant 255 Expr Call Attribute Name draw Tuple BinOp Name left Add Constant 6 BinOp BinOp Name bottom Sub Name text_height Sub Constant 5 Name name keyword Tuple Constant 255 Constant 255 Constant 255 Constant 255 Delete Name draw Del Expr Call Attribute Name pil_image
Module FunctionDef arguments arg rect Expr Constant Return Tuple Call Attribute Name rect Call Attribute Name rect Call Attribute Name rect Call Attribute Name rect
Module FunctionDef arguments arg css arg image_shape Expr Constant Return Tuple Call Name max Subscript Name css Constant 0 Constant 0 Call Name min Subscript Name css Constant 1 Subscript Name image_shape Constant 1 Call Name min Subscript Name css Constant 2 Subscript Name image_shape Constant 0 Call Name max Subscript Name css Constant 3 Constant 0
Module FunctionDef arguments arg face_encodings arg face_to_compare Expr Constant If Compare Call Name len Name face_encodings Eq Constant 0 Return Call Attribute Name np Constant 0 Return Call Attribute Attribute Name np BinOp Name face_encodings Sub Name face_to_compare keyword Constant 1
Module FunctionDef arguments arg file arg mode Constant RGB Expr Constant Assign Name im Call Attribute Attribute Name PIL Name file If Name mode Assign Name im Call Attribute Name im Name mode Return Call Attribute Name np Name im
Module FunctionDef arguments arg img arg arg model Constant 1 Constant hog Expr Constant If Compare Name model Eq Constant cnn Return Call Name cnn_face_detector Name img Name Return Call Name face_detector Name img Name
Module FunctionDef arguments arg img arg arg model Constant 1 Constant hog Expr Constant If Compare Name model Eq Constant cnn Return ListComp Call Name _trim_css_to_bounds Call Name _rect_to_css Attribute Name face Attribute Name img comprehension Name face Call Name _raw_face_locations Name img Name Constant cnn Return ListComp Call Name _trim_css_to_bounds Call Name _rect_to_css Name face Attribute Name img comprehension Name face Call Name _raw_face_locations Name img Name Name model
Module FunctionDef arguments arg images arg arg batch_size Constant 1 Constant 128 Expr Constant FunctionDef arguments arg detections Return ListComp Call Name _trim_css_to_bounds Call Name _rect_to_css Attribute Name face Attribute Subscript Name images Constant 0 comprehension Name face Name detections Assign Name Call Name Name images Name Name batch_size Return Call Name list Call Name map Name Name
Module FunctionDef arguments arg face_image arg face_locations arg model Constant None Constant large Expr Constant Assign Name landmarks Call Name _raw_face_landmarks Name face_image Name face_locations Name model Assign Name landmarks_as_tuples ListComp ListComp Tuple Attribute Name p Attribute Name p comprehension Name p Call Attribute Name landmark comprehension Name landmark Name landmarks If Compare Name model Eq Constant large Return ListComp Dict Constant chin Constant left_eyebrow Constant right_eyebrow Constant nose_bridge Constant nose_tip Constant left_eye Constant right_eye Constant top_lip Constant bottom_lip Subscript Name points Slice Constant 0 Constant 17 Subscript Name points Slice Constant 17 Constant 22 Subscript Name points Slice Constant 22 Constant 27 Subscript Name points Slice Constant 27 Constant 31 Subscript Name points Slice Constant 31 Constant 36 Subscript Name points Slice Constant 36 Constant 42 Subscript Name points Slice Constant 42 Constant 48 BinOp BinOp BinOp BinOp BinOp Subscript Name points Slice Constant 48 Constant 55 Add List Subscript Name points Constant 64 Add List Subscript Name points Constant 63 Add List Subscript Name points Constant 62 Add List Subscript Name points Constant 61 Add List Subscript Name points Constant 60 BinOp BinOp BinOp BinOp BinOp BinOp Subscript Name points Slice Constant 54 Constant 60 Add List Subscript Name points Constant 48 Add List Subscript Name points Constant 60 Add List Subscript Name points Constant 67 Add List Subscript Name points Constant 66 Add List Subscript Name points Constant 65 Add List Subscript Name points Constant 64 comprehension Name points Name landmarks_as_tuples If Compare Name model Eq Constant small Return ListComp Dict Constant nose_tip Constant left_eye Constant right_eye List Subscript Name points Constant 4 Subscript Name points Slice Constant 2 Constant 4 Subscript Name points Slice Constant 0 Constant 2 comprehension Name points Name landmarks_as_tuples Raise Call Name ValueError Constant
Module FunctionDef arguments arg face_image arg arg num_jitters Constant None Constant 1 Expr Constant Assign Name raw_landmarks Call Name _raw_face_landmarks Name face_image Name keyword Constant small Return ListComp Call Attribute Name np Call Attribute Name face_encoder Name face_image Name raw_landmark_set Name num_jitters comprehension Name raw_landmark_set Name raw_landmarks
Module FunctionDef arguments arg s Expr Constant Assign Name sc Attribute Name SparkContext FunctionDef arguments arg type_str Return Call Name Call Attribute Call Attribute Attribute Attribute Attribute Attribute Attribute Attribute Attribute Name sc Name type_str FunctionDef arguments arg type_str Return Call Name Call Attribute Call Attribute Attribute Attribute Attribute Attribute Attribute Attribute Attribute Attribute Name sc Name type_str Try Return Call Name from_ddl_schema Name s ExceptHandler Name Exception Try Return Call Name from_ddl_datatype Name s ExceptHandler Try Return Call Name from_ddl_datatype BinOp Constant struct<%s> Mod Call Attribute Name s ExceptHandler Raise Name e
Module FunctionDef arguments arg size Expr Constant If Compare Name size LtE Constant 8 Return Name ByteType If Compare Name size LtE Constant 16 Return Name ShortType If Compare Name size LtE Constant 32 Return Name IntegerType If Compare Name size LtE Constant 64 Return Name LongType
Module FunctionDef arguments arg obj Expr Constant If Compare Name obj Is Constant None Return Call Name NullType If Call Name hasattr Name obj Constant __UDT__ Return Attribute Name obj Assign Name dataType Call Attribute Name _type_mappings Call Name type Name obj If Compare Name dataType Is Name DecimalType Return Call Name DecimalType Constant 38 Constant 18 If Compare Name dataType IsNot Constant None Return Call Name dataType If Call Name isinstance Name obj Name dict For Tuple Name key Name value Call Attribute Name obj If BoolOp And Compare Name key IsNot Constant None Compare Name value IsNot Constant None Return Call Name MapType Call Name _infer_type Name key Call Name _infer_type Name value Constant True Return Call Name MapType Call Name NullType Call Name NullType Constant True If Call Name isinstance Name obj Name list For Name v Name obj If Compare Name v IsNot Constant None Return Call Name ArrayType Call Name _infer_type Subscript Name obj Constant 0 Constant True Return Call Name ArrayType Call Name NullType Constant True If Call Name isinstance Name obj Name array If Compare Attribute Name obj In Name Return Call Name ArrayType Call Subscript Name Attribute Name obj Constant False Raise Call Name TypeError BinOp Constant Mod Attribute Name obj Try Return Call Name _infer_schema Name obj ExceptHandler Name TypeError Raise Call Name TypeError BinOp Constant Mod Call Name type Name obj
Module FunctionDef arguments arg row arg names Constant None Expr Constant If Call Name isinstance Name row Name dict Assign Name items Call Name sorted Call Attribute Name row If Call Name isinstance Name row Tuple Name tuple Name list If Call Name hasattr Name row Constant __fields__ Assign Name items Call Name zip Attribute Name row Call Name tuple Name row If Call Name hasattr Name row Constant _fields Assign Name items Call Name zip Attribute Name row Call Name tuple Name row If Compare Name names Is Constant None Assign Name names ListComp BinOp Constant _%d Mod Name i comprehension Name i Call Name range Constant 1 BinOp Call Name len Name row Add Constant 1 If Compare Call Name len Name names Lt Call Name len Name row Expr Call Attribute Name names GeneratorExp BinOp Constant _%d Mod Name i comprehension Name i Call Name range BinOp Call Name len Name names Add Constant 1 BinOp Call Name len Name row Add Constant 1 Assign Name items Call Name zip Name names Name row If Call Name hasattr Name row Constant __dict__ Assign Name items Call Name sorted Call Attribute Attribute Name row Raise Call Name TypeError BinOp Constant Mod Call Name type Name row Assign Name fields ListComp Call Name StructField Name k Call Name _infer_type Name v Constant True comprehension Tuple Name k Name v Name items Return Call Name StructType Name fields
Module FunctionDef arguments arg dt Expr Constant If Call Name isinstance Name dt Name StructType Return Call Name any GeneratorExp Call Name _has_nulltype Attribute Name f comprehension Name f Attribute Name dt If Call Name isinstance Name dt Name ArrayType Return Call Name _has_nulltype Attribute Name dt If Call Name isinstance Name dt Name MapType Return BoolOp Or Call Name _has_nulltype Attribute Name dt Call Name _has_nulltype Attribute Name dt Return Call Name isinstance Name dt Name NullType
Module FunctionDef arguments arg dataType Expr Constant If UnaryOp Not Call Name _need_converter Name dataType Return Lambda arguments arg x Name x If Call Name isinstance Name dataType Name ArrayType Assign Name conv Call Name _create_converter Attribute Name dataType Return Lambda arguments arg row ListComp Call Name conv Name v comprehension Name v Name row If Call Name isinstance Name dataType Name MapType Assign Name kconv Call Name _create_converter Attribute Name dataType Assign Name vconv Call Name _create_converter Attribute Name dataType Return Lambda arguments arg row Call Name dict GeneratorExp Tuple Call Name kconv Name k Call Name vconv Name v comprehension Tuple Name k Name v Call Attribute Name row If Call Name isinstance Name dataType Name NullType Return Lambda arguments arg x Constant None If UnaryOp Not Call Name isinstance Name dataType Name StructType Return Lambda arguments arg x Name x Assign Name names ListComp Attribute Name f comprehension Name f Attribute Name dataType Assign Name converters ListComp Call Name _create_converter Attribute Name f comprehension Name f Attribute Name dataType Assign Name convert_fields Call Name any GeneratorExp Call Name _need_converter Attribute Name f comprehension Name f Attribute Name dataType FunctionDef arguments arg obj If Compare Name obj Is Constant None Return If Call Name isinstance Name obj Tuple Name tuple Name list If Name convert_fields Return Call Name tuple GeneratorExp Call Name conv Name v comprehension Tuple Name v Name conv Call Name zip Name obj Name converters Return Call Name tuple Name obj If Call Name isinstance Name obj Name dict Assign Name d Name obj If Call Name hasattr Name obj Constant __dict__ Assign Name d Attribute Name obj Raise Call Name TypeError BinOp Constant Mod Call Name type Name obj If Name convert_fields Return Call Name tuple ListComp Call Name conv Call Attribute Name d Name name comprehension Tuple Name name Name conv Call Name zip Name names Name converters Return Call Name tuple ListComp Call Attribute Name d Name name comprehension Name name Name names Return Name convert_struct
Module FunctionDef arguments arg dataType arg nullable arg name Constant True Constant None Expr Constant If Compare Name name Is Constant None Assign Name new_msg Lambda arguments arg msg Name msg Assign Name new_name Lambda arguments arg n BinOp Constant field %s Mod Name n Assign Name new_msg Lambda arguments arg msg BinOp Constant %s: %s Mod Tuple Name name Name msg Assign Name new_name Lambda arguments arg n BinOp Constant field %s in %s Mod Tuple Name n Name name FunctionDef arguments arg obj If Compare Name obj Is Constant None If Name nullable Return Constant True Raise Call Name ValueError Call Name new_msg Constant Return Constant False Assign Name _type Call Name type Name dataType FunctionDef arguments arg obj Assert Compare Name _type In Name _acceptable_types Call Name new_msg BinOp Constant Mod Tuple Name dataType Name obj FunctionDef arguments arg obj If Compare Call Name type Name obj NotIn Subscript Name _acceptable_types Name _type Raise Call Name TypeError Call Name new_msg BinOp Constant Mod Tuple Name dataType Name obj Call Name type Name obj If Call Name isinstance Name dataType Name StringType Assign Name verify_value Lambda arguments arg _ Name _ If Call Name isinstance Name dataType Name UserDefinedType Assign Name verifier Call Name _make_type_verifier Call Attribute Name dataType keyword Name name FunctionDef arguments arg obj If UnaryOp Not BoolOp And Call Name hasattr Name obj Constant __UDT__ Compare Attribute Name obj Eq Name dataType Raise Call Name ValueError Call Name new_msg BinOp Constant Mod Tuple Name obj Name dataType Expr Call Name verifier Call Attribute Name dataType Name obj Assign Name verify_value Name verify_udf If Call Name isinstance Name dataType Name ByteType FunctionDef arguments arg obj Expr Call Name Name obj Expr Call Name Name obj If BoolOp Or Compare Name obj Lt UnaryOp USub Constant 128 Compare Name obj Gt Constant 127 Raise Call Name ValueError Call Name new_msg BinOp Constant Mod Name obj Assign Name verify_value Name verify_byte If Call Name isinstance Name dataType Name ShortType FunctionDef arguments arg obj Expr Call Name Name obj Expr Call Name Name obj If BoolOp Or Compare Name obj Lt UnaryOp USub Constant 32768 Compare Name obj Gt Constant 32767 Raise Call Name ValueError Call Name new_msg BinOp Constant Mod Name obj Assign Name verify_value Name verify_short If Call Name isinstance Name dataType Name IntegerType FunctionDef arguments arg obj Expr Call Name Name obj Expr Call Name Name obj If BoolOp Or Compare Name obj Lt UnaryOp USub Constant 2147483648 Compare Name obj Gt Constant 2147483647 Raise Call Name ValueError Call Name new_msg BinOp Constant Mod Name obj Assign Name verify_value Name verify_integer If Call Name isinstance Name dataType Name ArrayType Assign Name element_verifier Call Name _make_type_verifier Attribute Name dataType Attribute Name dataType keyword BinOp Constant element in array %s Mod Name name FunctionDef arguments arg obj Expr Call Name Name obj Expr Call Name Name obj For Name i Name obj Expr Call Name element_verifier Name i Assign Name verify_value Name verify_array If Call Name isinstance Name dataType Name MapType Assign Name key_verifier Call Name _make_type_verifier Attribute Name dataType Constant False keyword BinOp Constant key of map %s Mod Name name Assign Name value_verifier Call Name _make_type_verifier Attribute Name dataType Attribute Name dataType keyword BinOp Constant value of map %s Mod Name name FunctionDef arguments arg obj Expr Call Name Name obj Expr Call Name Name obj For Tuple Name k Name v Call Attribute Name obj Expr Call Name key_verifier Name k Expr Call Name value_verifier Name v Assign Name verify_value Name verify_map If Call Name isinstance Name dataType Name StructType Assign Name verifiers List For Name f Attribute Name dataType Assign Name verifier Call Name _make_type_verifier Attribute Name f Attribute Name f keyword Call Name new_name Attribute Name f Expr Call Attribute Name verifiers Tuple Attribute Name f Name verifier FunctionDef arguments arg obj Expr Call Name Name obj If Call Name isinstance Name obj Name dict For Tuple Name f Name verifier Name verifiers Expr Call Name verifier Call Attribute Name obj Name f If BoolOp And Call Name isinstance Name obj Name Row Call Name getattr Name obj Constant __from_dict__ Constant False For Tuple Name f Name verifier Name verifiers Expr Call Name verifier Subscript Name obj Name f If Call Name isinstance Name obj Tuple Name tuple Name list If Compare Call Name len Name obj NotEq Call Name len Name verifiers Raise Call Name ValueError Call Name new_msg BinOp Constant Mod Tuple Call Name len Name obj Call Name len Name verifiers For Tuple Name v Tuple Name _ Name verifier Call Name zip Name obj Name verifiers Expr Call Name verifier Name v If Call Name hasattr Name obj Constant __dict__ Assign Name d Attribute Name obj For Tuple Name f Name verifier Name verifiers Expr Call Name verifier Call Attribute Name d Name f Raise Call Name TypeError Call Name new_msg BinOp Constant Mod Tuple Name obj Call Name type Name obj Assign Name verify_value Name verify_struct FunctionDef arguments arg obj Expr Call Name Name obj Expr Call Name Name obj Assign Name verify_value Name verify_default FunctionDef arguments arg obj If UnaryOp Not Call Name verify_nullability Name obj Expr Call Name verify_value Name obj Return Name verify
Module FunctionDef arguments arg dt Expr Constant Import alias If Compare Call Name type Name dt Eq Name BooleanType Assign Name arrow_type Call Attribute Name pa If Compare Call Name type Name dt Eq Name ByteType Assign Name arrow_type Call Attribute Name pa If Compare Call Name type Name dt Eq Name ShortType Assign Name arrow_type Call Attribute Name pa If Compare Call Name type Name dt Eq Name IntegerType Assign Name arrow_type Call Attribute Name pa If Compare Call Name type Name dt Eq Name LongType Assign Name arrow_type Call Attribute Name pa If Compare Call Name type Name dt Eq Name FloatType Assign Name arrow_type Call Attribute Name pa If Compare Call Name type Name dt Eq Name DoubleType Assign Name arrow_type Call Attribute Name pa If Compare Call Name type Name dt Eq Name DecimalType Assign Name arrow_type Call Attribute Name pa Attribute Name dt Attribute Name dt If Compare Call Name type Name dt Eq Name StringType Assign Name arrow_type Call Attribute Name pa If Compare Call Name type Name dt Eq Name BinaryType Assign Name arrow_type Call Attribute Name pa If Compare Call Name type Name dt Eq Name DateType Assign Name arrow_type Call Attribute Name pa If Compare Call Name type Name dt Eq Name TimestampType Assign Name arrow_type Call Attribute Name pa Constant us keyword Constant UTC If Compare Call Name type Name dt Eq Name ArrayType If Compare Call Name type Attribute Name dt In List Name StructType Name TimestampType Raise Call Name TypeError BinOp Constant Add Call Name str Name dt Assign Name arrow_type Call Attribute Name pa Call Name to_arrow_type Attribute Name dt If Compare Call Name type Name dt Eq Name StructType If Call Name any GeneratorExp Compare Call Name type Attribute Name field Eq Name StructType comprehension Name field Name dt Raise Call Name TypeError Constant Assign Name fields ListComp Call Attribute Name pa Attribute Name field Call Name to_arrow_type Attribute Name field keyword Attribute Name field comprehension Name field Name dt Assign Name arrow_type Call Attribute Name pa Name fields Raise Call Name TypeError BinOp Constant Add Call Name str Name dt Return Name arrow_type
Module FunctionDef arguments arg schema Expr Constant Import alias Assign Name fields ListComp Call Attribute Name pa Attribute Name field Call Name to_arrow_type Attribute Name field keyword Attribute Name field comprehension Name field Name schema Return Call Attribute Name pa Name fields
Module FunctionDef arguments arg at Expr Constant Import alias If Call Attribute Name types Name at Assign Name spark_type Call Name BooleanType If Call Attribute Name types Name at Assign Name spark_type Call Name ByteType If Call Attribute Name types Name at Assign Name spark_type Call Name ShortType If Call Attribute Name types Name at Assign Name spark_type Call Name IntegerType If Call Attribute Name types Name at Assign Name spark_type Call Name LongType If Call Attribute Name types Name at Assign Name spark_type Call Name FloatType If Call Attribute Name types Name at Assign Name spark_type Call Name DoubleType If Call Attribute Name types Name at Assign Name spark_type Call Name DecimalType keyword Attribute Name at keyword Attribute Name at If Call Attribute Name types Name at Assign Name spark_type Call Name StringType If Call Attribute Name types Name at Assign Name spark_type Call Name BinaryType If Call Attribute Name types Name at Assign Name spark_type Call Name DateType If Call Attribute Name types Name at Assign Name spark_type Call Name TimestampType If Call Attribute Name types Name at If Call Attribute Name types Attribute Name at Raise Call Name TypeError BinOp Constant Add Call Name str Name at Assign Name spark_type Call Name ArrayType Call Name from_arrow_type Attribute Name at If Call Attribute Name types Name at If Call Name any GeneratorExp Call Attribute Name types Attribute Name field comprehension Name field Name at Raise Call Name TypeError BinOp Constant Add Call Name str Name at Return Call Name StructType ListComp Call Name StructField Attribute Name field Call Name from_arrow_type Attribute Name field keyword Attribute Name field comprehension Name field Name at Raise Call Name TypeError BinOp Constant Add Call Name str Name at Return Name spark_type
Module FunctionDef arguments arg arrow_schema Expr Constant Return Call Name StructType ListComp Call Name StructField Attribute Name field Call Name from_arrow_type Attribute Name field keyword Attribute Name field comprehension Name field Name arrow_schema
Module FunctionDef arguments arg s arg timezone Expr Constant ImportFrom alias Expr Call Name ImportFrom alias Assign Name tz BoolOp Or Name timezone Call Name _get_local_timezone If Call Name Attribute Name s Return Call Attribute Attribute Call Attribute Attribute Name s Name tz Constant None Return Name s
Module FunctionDef arguments arg pdf arg timezone Expr Constant ImportFrom alias Expr Call Name For Tuple Name column Name series Call Attribute Name pdf Assign Subscript Name pdf Name column Call Name Name series Name timezone Return Name pdf
Module FunctionDef arguments arg s arg timezone Expr Constant ImportFrom alias Expr Call Name ImportFrom alias alias If Call Name is_datetime64_dtype Attribute Name s Assign Name tz BoolOp Or Name timezone Call Name _get_local_timezone Return Call Attribute Attribute Call Attribute Attribute Name s Name tz keyword Constant False Constant UTC If Call Name Attribute Name s Return Call Attribute Attribute Name s Constant UTC Return Name s
Module FunctionDef arguments arg s arg from_timezone arg to_timezone Expr Constant ImportFrom alias Expr Call Name Import alias ImportFrom alias alias Assign Name from_tz BoolOp Or Name from_timezone Call Name _get_local_timezone Assign Name to_tz BoolOp Or Name to_timezone Call Name _get_local_timezone If Call Name Attribute Name s Return Call Attribute Attribute Call Attribute Attribute Name s Name to_tz Constant None If BoolOp And Call Name is_datetime64_dtype Attribute Name s Compare Name from_tz NotEq Name to_tz Return Call Attribute Name s Lambda arguments arg ts IfExp Compare Name ts IsNot Attribute Name pd Call Attribute Call Attribute Call Attribute Name ts Name from_tz keyword Constant False Name to_tz Constant None Attribute Name pd Return Name s
Module FunctionDef arguments arg self arg field arg data_type arg nullable arg metadata Constant None Constant True Constant None Expr Constant If Call Name isinstance Name field Name StructField Expr Call Attribute Attribute Name self Name field Expr Call Attribute Attribute Name self Attribute Name field If BoolOp And Call Name isinstance Name field Name str Compare Name data_type Is Constant None Raise Call Name ValueError Constant If Call Name isinstance Name data_type Name str Assign Name data_type_f Call Name Name data_type Assign Name data_type_f Name data_type Expr Call Attribute Attribute Name self Call Name StructField Name field Name data_type_f Name nullable Name metadata Expr Call Attribute Attribute Name self Name field Assign Attribute Name self ListComp Call Attribute Name f comprehension Name f Name self Assign Attribute Name self Call Name any Attribute Name self Return Name self
Module FunctionDef arguments arg cls Expr Constant If UnaryOp Not Call Name hasattr Name cls Constant _cached_sql_type Assign Attribute Name cls Call Attribute Name cls Return Attribute Name cls
Module FunctionDef arguments arg self arg recursive Constant False Expr Constant If UnaryOp Not Call Name hasattr Name self Constant __fields__ Raise Call Name TypeError Constant If Name recursive FunctionDef arguments arg obj If Call Name isinstance Name obj Name Row Return Call Attribute Name obj Constant True If Call Name isinstance Name obj Name list Return ListComp Call Name conv Name o comprehension Name o Name obj If Call Name isinstance Name obj Name dict Return Call Name dict GeneratorExp Tuple Name k Call Name conv Name v comprehension Tuple Name k Name v Call Attribute Name obj Return Name obj Return Call Name dict Call Name zip Attribute Name self GeneratorExp Call Name conv Name o comprehension Name o Name self Return Call Name dict Call Name zip Attribute Name self Name self
Module FunctionDef arguments arg self Expr Constant If Attribute Name self Return Call Name Attribute Call Name super Name Name self Raise Call Name RuntimeError BinOp Constant Mod Attribute Attribute Name self
Module FunctionDef arguments arg self arg dataset Expr Constant If UnaryOp Not Call Name isinstance Name dataset Name DataFrame Raise Call Name ValueError BinOp Constant Mod Call Name type Name dataset Assign Name java_lr_summary Call Attribute Name self Constant evaluate Name dataset Return Call Name Name java_lr_summary
Module FunctionDef arguments arg self Expr Constant If Attribute Name self Return Call Name Attribute Call Name super Name Name self Raise Call Name RuntimeError BinOp Constant Mod Attribute Attribute Name self
Module FunctionDef arguments arg self arg dataset Expr Constant If UnaryOp Not Call Name isinstance Name dataset Name DataFrame Raise Call Name ValueError BinOp Constant Mod Call Name type Name dataset Assign Name java_glr_summary Call Attribute Name self Constant evaluate Name dataset Return Call Name Name java_glr_summary
Module FunctionDef arguments arg sub Expr Constant Assign Name path Call Attribute Attribute Name os Constant SPARK_LOCAL_DIRS Constant /tmp Assign Name dirs Call Attribute Name path Constant , If Compare Call Name len Name dirs Gt Constant 1 Assign Name rnd Call Attribute Name random BinOp Call Attribute Name os Add Call Name id Name dirs Expr Call Attribute Name random Name dirs Attribute Name rnd Return ListComp Call Attribute Attribute Name os Name d Constant python Call Name str Call Attribute Name os Name sub comprehension Name d Name dirs
Module FunctionDef arguments arg self arg n Expr Constant Return Call Attribute Attribute Name os Subscript Attribute Name self BinOp Name n Mod Call Name len Attribute Name self Call Name str Name n
Module FunctionDef arguments arg self arg iterator Expr Constant Assign Tuple Name creator Name comb Tuple Attribute Attribute Name self Attribute Attribute Name self Assign Tuple Name c Name data Name pdata Name hfun Name batch Tuple Constant 0 Attribute Name self Attribute Name self Attribute Name self Attribute Name self Assign Name limit Attribute Name self For Tuple Name k Name v Name iterator Assign Name d IfExp Name pdata Subscript Name pdata Call Name hfun Name k Name data Assign Subscript Name d Name k IfExp Compare Name k In Name d Call Name comb Subscript Name d Name k Name v Call Name creator Name v AugAssign Name c Add Constant 1 If Compare Name c GtE Name batch If Compare Call Name get_used_memory GtE Name limit Expr Call Attribute Name self Assign Name limit Call Attribute Name self AugAssign Name batch Div Constant 2 Assign Name c Constant 0 AugAssign Name batch Mult Constant 1.5 If Compare Call Name get_used_memory GtE Name limit Expr Call Attribute Name self
Module FunctionDef arguments arg self arg iterator arg limit Constant None Expr Constant If Compare Name limit Is Constant None Assign Name limit Attribute Name self Assign Tuple Name comb Name hfun Name objsize Tuple Attribute Attribute Name self Attribute Name self Attribute Name self Assign Tuple Name c Name data Name pdata Name batch Tuple Constant 0 Attribute Name self Attribute Name self Attribute Name self For Tuple Name k Name v Name iterator Assign Name d IfExp Name pdata Subscript Name pdata Call Name hfun Name k Name data Assign Subscript Name d Name k IfExp Compare Name k In Name d Call Name comb Subscript Name d Name k Name v Name v If UnaryOp Not Name limit Continue AugAssign Name c Add Call Name objsize Name v If Compare Name c Gt Name batch If Compare Call Name get_used_memory Gt Name limit Expr Call Attribute Name self Assign Name limit Call Attribute Name self AugAssign Name batch Div Constant 2 Assign Name c Constant 0 AugAssign Name batch Mult Constant 1.5 If BoolOp And Name limit Compare Call Name get_used_memory GtE Name limit Expr Call Attribute Name self
Module FunctionDef arguments arg self Expr Constant Global Assign Name path Call Attribute Name self Attribute Name self If UnaryOp Not Call Attribute Attribute Name os Name path Expr Call Attribute Name os Name path Assign Name used_memory Call Name get_used_memory If UnaryOp Not Attribute Name self Assign Name streams ListComp Call Name open Call Attribute Attribute Name os Name path Call Name str Name i Constant wb comprehension Name i Call Name range Attribute Name self For Tuple Name k Name v Call Attribute Attribute Name self Assign Name h Call Attribute Name self Name k Expr Call Attribute Attribute Name self List Tuple Name k Name v Subscript Name streams Name h For Name s Name streams AugAssign Name DiskBytesSpilled Add Call Attribute Name s Expr Call Attribute Name s Expr Call Attribute Attribute Name self Expr Call Attribute Attribute Name self ListComp Dict comprehension Name i Call Name range Attribute Name self For Name i Call Name range Attribute Name self Assign Name p Call Attribute Attribute Name os Name path Call Name str Name i With withitem Call Name open Name p Constant wb Name f Expr Call Attribute Attribute Name self Call Name iter Call Attribute Subscript Attribute Name self Name i Name f Expr Call Attribute Subscript Attribute Name self Name i AugAssign Name DiskBytesSpilled Add Call Attribute Attribute Name os Name p AugAssign Attribute Name self Add Constant 1 Expr Call Attribute Name gc AugAssign Name MemoryBytesSpilled Add BinOp Call Name max BinOp Name used_memory Sub Call Name get_used_memory Constant 0 LShift Constant 20
Module FunctionDef arguments arg self Expr Constant If BoolOp And UnaryOp Not Attribute Name self UnaryOp Not Attribute Name self Return Call Name iter Call Attribute Attribute Name self Return Call Attribute Name self
Module FunctionDef arguments arg self Expr Constant Assert UnaryOp Not Attribute Name self If Call Name any Attribute Name self Expr Call Attribute Name self Assign Attribute Name self List Try For Name i Call Name range Attribute Name self For Name v Call Attribute Name self Name i Expr Yield Name v Expr Call Attribute Attribute Name self For Name j Call Name range Attribute Name self Assign Name path Call Attribute Name self Name j Expr Call Attribute Name os Call Attribute Attribute Name os Name path Call Name str Name i Expr Call Attribute Name self
Module FunctionDef arguments arg self arg index Expr Constant Assign Name subdirs ListComp Call Attribute Attribute Name os Name d Constant parts Call Name str Name index comprehension Name d Attribute Name self Assign Name m Call Name ExternalMerger Attribute Name self Attribute Name self Attribute Name self Name subdirs BinOp Attribute Name self Mult Attribute Name self Attribute Name self Attribute Name self Assign Attribute Name m ListComp Dict comprehension Name _ Call Name range Attribute Name self Assign Name limit Call Attribute Name self For Name j Call Name range Attribute Name self Assign Name path Call Attribute Name self Name j Assign Name p Call Attribute Attribute Name os Name path Call Name str Name index With withitem Call Name open Name p Constant rb Name f Expr Call Attribute Name m Call Attribute Attribute Name self Name f Constant 0 If Compare Call Name get_used_memory Gt Name limit Expr Call Attribute Name m Assign Name limit Call Attribute Name self Return Call Attribute Name m
Module FunctionDef arguments arg self arg n Expr Constant Assign Name d Subscript Attribute Name self BinOp Name n Mod Call Name len Attribute Name self If UnaryOp Not Call Attribute Attribute Name os Name d Expr Call Attribute Name os Name d Return Call Attribute Attribute Name os Name d Call Name str Name n
Module FunctionDef arguments arg self arg iterator arg key arg reverse Constant None Constant False Expr Constant Global Assign Tuple Name batch Name limit Tuple Constant 100 Call Attribute Name self Assign Tuple Name chunks Name current_chunk Tuple List List Assign Name iterator Call Name iter Name iterator While Constant True Assign Name chunk Call Name list Call Attribute Name itertools Name iterator Name batch Expr Call Attribute Name current_chunk Name chunk If Compare Call Name len Name chunk Lt Name batch Break Assign Name used_memory Call Name get_used_memory If Compare Name used_memory Gt Name limit Expr Call Attribute Name current_chunk keyword Name key keyword Name reverse Assign Name path Call Attribute Name self Call Name len Name chunks With withitem Call Name open Name path Constant wb Name f Expr Call Attribute Attribute Name self Name current_chunk Name f FunctionDef arguments arg f For Name v Call Attribute Attribute Name self Name f Expr Yield Name v Expr Call Attribute Name f Expr Call Attribute Name chunks Call Name load Call Name open Name path Constant rb Assign Name current_chunk List AugAssign Name MemoryBytesSpilled Add BinOp Call Name max BinOp Name used_memory Sub Call Name get_used_memory Constant 0 LShift Constant 20 AugAssign Name DiskBytesSpilled Add Call Attribute Attribute Name os Name path Expr Call Attribute Name os Name path If UnaryOp Not Name chunks Assign Name batch Call Name min Call Name int BinOp Name batch Mult Constant 1.5 Constant 10000 Expr Call Attribute Name current_chunk keyword Name key keyword Name reverse If UnaryOp Not Name chunks Return Name current_chunk If Name current_chunk Expr Call Attribute Name chunks Call Name iter Name current_chunk Return Call Attribute Name heapq Name chunks keyword Name key keyword Name reverse
Module FunctionDef arguments arg self Expr Constant Global If Compare Attribute Name self Is Constant None Expr Call Attribute Name self Assign Name used_memory Call Name get_used_memory Assign Name pos Call Attribute Attribute Name self Expr Call Attribute Attribute Name self Attribute Name self Attribute Name self Assign Attribute Name self List Expr Call Attribute Name gc AugAssign Name DiskBytesSpilled Add BinOp Call Attribute Attribute Name self Sub Name pos AugAssign Name MemoryBytesSpilled Add BinOp Call Name max BinOp Name used_memory Sub Call Name get_used_memory Constant 0 LShift Constant 20
Module FunctionDef arguments arg self Expr Constant Global Assign Name path Call Attribute Name self Attribute Name self If UnaryOp Not Call Attribute Attribute Name os Name path Expr Call Attribute Name os Name path Assign Name used_memory Call Name get_used_memory If UnaryOp Not Attribute Name self Assign Name streams ListComp Call Name open Call Attribute Attribute Name os Name path Call Name str Name i Constant wb comprehension Name i Call Name range Attribute Name self Assign Attribute Name self Compare Call Name len Attribute Name self Lt Attribute Name self If Attribute Name self Assign Attribute Name self Call Attribute Name self For Name k Call Name sorted Call Attribute Attribute Name self Assign Name h Call Attribute Name self Name k Expr Call Attribute Attribute Name self List Tuple Name k Subscript Attribute Name self Name k Subscript Name streams Name h For Tuple Name k Name v Call Attribute Attribute Name self Assign Name h Call Attribute Name self Name k Expr Call Attribute Attribute Name self List Tuple Name k Name v Subscript Name streams Name h For Name s Name streams AugAssign Name DiskBytesSpilled Add Call Attribute Name s Expr Call Attribute Name s Expr Call Attribute Attribute Name self Expr Call Attribute Attribute Name self ListComp Dict comprehension Name i Call Name range Attribute Name self For Name i Call Name range Attribute Name self Assign Name p Call Attribute Attribute Name os Name path Call Name str Name i With withitem Call Name open Name p Constant wb Name f If Attribute Name self Assign Name sorted_items Call Name sorted Call Attribute Subscript Attribute Name self Name i keyword Call Attribute Name operator Constant 0 Expr Call Attribute Attribute Name self Name sorted_items Name f Expr Call Attribute Attribute Name self Call Attribute Subscript Attribute Name self Name i Name f Expr Call Attribute Subscript Attribute Name self Name i AugAssign Name DiskBytesSpilled Add Call Attribute Attribute Name os Name p AugAssign Attribute Name self Add Constant 1 Expr Call Attribute Name gc AugAssign Name MemoryBytesSpilled Add BinOp Call Name max BinOp Name used_memory Sub Call Name get_used_memory Constant 0 LShift Constant 20
Module FunctionDef arguments arg self arg index Expr Constant FunctionDef arguments arg j Assign Name path Call Attribute Name self Name j Assign Name p Call Attribute Attribute Name os Name path Call Name str Name index With withitem Call Name open Name p Constant rb Constant 65536 Name f For Name v Call Attribute Attribute Name self Name f Expr Yield Name v Assign Name disk_items ListComp Call Name load_partition Name j comprehension Name j Call Name range Attribute Name self If Attribute Name self Assign Name sorted_items Call Attribute Name heapq Name disk_items keyword Call Attribute Name operator Constant 0 Assign Name ser Call Attribute Name self Assign Name sorter Call Name ExternalSorter Attribute Name self Name ser Assign Name sorted_items Call Attribute Name sorter Call Attribute Name itertools Starred Name disk_items keyword Call Attribute Name operator Constant 0 Return GeneratorExp Tuple Name k Name vs comprehension Tuple Name k Name vs Call Name GroupByKey Name sorted_items
Module FunctionDef arguments arg sock arg authenticated Expr Constant Expr Call Attribute Name signal Name SIGHUP Name SIG_DFL Expr Call Attribute Name signal Name SIGCHLD Name SIG_DFL Expr Call Attribute Name signal Name SIGTERM Name SIG_DFL Expr Call Attribute Name signal Name SIGINT Attribute Name signal Assign Name infile Call Attribute Name os Call Attribute Name os Call Attribute Name sock Constant rb Constant 65536 Assign Name outfile Call Attribute Name os Call Attribute Name os Call Attribute Name sock Constant wb Constant 65536 If UnaryOp Not Name authenticated Assign Name client_secret Call Attribute Call Name UTF8Deserializer Name infile If Compare Subscript Attribute Name os Constant Eq Name client_secret Expr Call Name write_with_length Call Attribute Constant ok Constant utf-8 Name outfile Expr Call Attribute Name outfile Expr Call Name write_with_length Call Attribute Constant err Constant utf-8 Name outfile Expr Call Attribute Name outfile Expr Call Attribute Name sock Return Constant 1 Assign Name exit_code Constant 0 Try Expr Call Name worker_main Name infile Name outfile ExceptHandler Name SystemExit Assign Name exit_code Call Name Attribute Name exc Try Expr Call Attribute Name outfile ExceptHandler Name Exception Pass Return Name exit_code
Module FunctionDef arguments arg x Expr Constant If BoolOp And Compare Attribute Name sys GtE Tuple Constant 3 Constant 2 Constant 3 Compare Constant PYTHONHASHSEED NotIn Attribute Name os Raise Call Name Exception Constant If Compare Name x Is Constant None Return Constant 0 If Call Name isinstance Name x Name tuple Assign Name h Constant 3430008 For Name i Name x AugAssign Name h BitXor Call Name portable_hash Name i AugAssign Name h Mult Constant 1000003 AugAssign Name h BitAnd Attribute Name sys AugAssign Name h BitXor Call Name len Name x If Compare Name h Eq UnaryOp USub Constant 1 Assign Name h UnaryOp USub Constant 2 Return Call Name int Name h Return Call Name hash Name x
Module FunctionDef arguments arg s Expr Constant Assign Name units Dict Constant g Constant m Constant t Constant k Constant 1024 Constant 1 BinOp Constant 1 LShift Constant 20 BinOp Constant 1.0 Div Constant 1024 If Compare Call Attribute Subscript Name s UnaryOp USub Constant 1 NotIn Name units Raise Call Name ValueError BinOp Constant invalid format:  Add Name s Return Call Name int BinOp Call Name float Subscript Name s Slice UnaryOp USub Constant 1 Mult Subscript Name units Call Attribute Subscript Name s UnaryOp USub Constant 1
Module FunctionDef arguments arg f Expr Constant If Compare Attribute Name sys GtE Constant 3 Assign Name literal_re Call Attribute Name re Constant (\W|^)[uU]([']) Attribute Name re Assign Attribute Name f Call Attribute Name literal_re Constant \1\2 Attribute Name f Return Name f
Module FunctionDef arguments arg self Expr Constant Assign Attribute Name self Constant True Expr Call Attribute Name self Attribute Name StorageLevel Return Name self
Module FunctionDef arguments arg self arg storageLevel Attribute Name StorageLevel Expr Constant Assign Attribute Name self Constant True Assign Name javaStorageLevel Call Attribute Attribute Name self Name storageLevel Expr Call Attribute Attribute Name self Name javaStorageLevel Return Name self
Module FunctionDef arguments arg self arg blocking Constant False Expr Constant Assign Attribute Name self Constant False Expr Call Attribute Attribute Name self Name blocking Return Name self
Module FunctionDef arguments arg self Expr Constant Assign Name checkpointFile Call Attribute Call Attribute Attribute Name self If Call Attribute Name checkpointFile Return Call Attribute Name checkpointFile
Module FunctionDef arguments arg self arg f arg Constant False Expr Constant FunctionDef arguments arg _ arg iterator Return Call Name map Call Name Name f Name iterator Return Call Attribute Name self Name func Name
Module FunctionDef arguments arg self arg f arg Constant False Expr Constant FunctionDef arguments arg s arg iterator Return Call Attribute Name chain Call Name map Call Name Name f Name iterator Return Call Attribute Name self Name func Name
Module FunctionDef arguments arg self arg f arg Constant False Expr Constant FunctionDef arguments arg s arg iterator Return Call Name f Name iterator Return Call Attribute Name self Name func Name
Module FunctionDef arguments arg self arg f arg Constant False Expr Constant Expr Call Attribute Name warnings Constant Name DeprecationWarning keyword Constant 2 Return Call Attribute Name self Name f Name
Module FunctionDef arguments arg self arg numPartitions Constant None Expr Constant Return Call Attribute Call Attribute Call Attribute Name self Lambda arguments arg x Tuple Name x Constant None Lambda arguments arg x arg _ Name x Name numPartitions Lambda arguments arg x Subscript Name x Constant 0
Module FunctionDef arguments arg self arg withReplacement arg fraction arg seed Constant None Expr Constant Assert Compare Name fraction GtE Constant 0.0 BinOp Constant Mod Name fraction Return Call Attribute Name self Attribute Call Name RDDSampler Name withReplacement Name fraction Name seed Constant True
Module FunctionDef arguments arg self arg weights arg seed Constant None Expr Constant Assign Name s Call Name float Call Name sum Name weights Assign Name cweights List Constant 0.0 For Name w Name weights Expr Call Attribute Name cweights BinOp Subscript Name cweights UnaryOp USub Constant 1 Add BinOp Name w Div Name s If Compare Name seed Is Constant None Assign Name seed Call Attribute Name random Constant 0 BinOp BinOp Constant 2 Pow Constant 32 Sub Constant 1 Return ListComp Call Attribute Name self Attribute Call Name RDDRangeSampler Name lb Name ub Name seed Constant True comprehension Tuple Name lb Name ub Call Name zip Name cweights Subscript Name cweights Slice Constant 1
Module FunctionDef arguments arg self arg withReplacement arg num arg seed Constant None Expr Constant Assign Name numStDev Constant 10.0 If Compare Name num Lt Constant 0 Raise Call Name ValueError Constant If Compare Name num Eq Constant 0 Return List Assign Name initialCount Call Attribute Name self If Compare Name initialCount Eq Constant 0 Return List Assign Name rand Call Attribute Name random Name seed If BoolOp And UnaryOp Not Name withReplacement Compare Name num GtE Name initialCount Assign Name samples Call Attribute Name self Expr Call Attribute Name rand Name samples Return Name samples Assign Name maxSampleSize BinOp Attribute Name sys Sub Call Name int BinOp Name numStDev Mult Call Name sqrt Attribute Name sys If Compare Name num Gt Name maxSampleSize Raise Call Name ValueError BinOp Constant Mod Name maxSampleSize Assign Name fraction Call Attribute Name RDD Name num Name initialCount Name withReplacement Assign Name samples Call Attribute Call Attribute Name self Name withReplacement Name fraction Name seed While Compare Call Name len Name samples Lt Name num Assign Name seed Call Attribute Name rand Constant 0 Attribute Name sys Assign Name samples Call Attribute Call Attribute Name self Name withReplacement Name fraction Name seed Expr Call Attribute Name rand Name samples Return Subscript Name samples Slice Constant 0 Name num
Module FunctionDef arguments arg arg total arg withReplacement Expr Constant Assign Name fraction BinOp Call Name float Name Div Name total If Name withReplacement Assign Name numStDev Constant 5 If Compare Name Lt Constant 12 Assign Name numStDev Constant 9 Return BinOp Name fraction Add BinOp Name numStDev Mult Call Name sqrt BinOp Name fraction Div Name total Assign Name delta Constant 5e-05 Assign Name gamma BinOp UnaryOp USub Call Name log Name delta Div Name total Return Call Name min Constant 1 BinOp BinOp Name fraction Add Name gamma Add Call Name sqrt BinOp BinOp Name gamma Mult Name gamma Add BinOp BinOp Constant 2 Mult Name gamma Mult Name fraction
Module FunctionDef arguments arg self arg other Expr Constant If Compare Attribute Name self Eq Attribute Name other Assign Name rdd Call Name RDD Call Attribute Attribute Name self Attribute Name other Attribute Name self Attribute Name self Assign Name self_copy Call Attribute Name self Assign Name other_copy Call Attribute Name other Assign Name rdd Call Name RDD Call Attribute Attribute Name self_copy Attribute Name other_copy Attribute Name self Attribute Attribute Name self If BoolOp And Compare Attribute Name self Eq Attribute Name other Compare Call Attribute Name self Eq Call Attribute Name rdd Assign Attribute Name rdd Attribute Name self Return Name rdd
Module FunctionDef arguments arg self arg other Expr Constant Return Call Attribute Call Attribute Call Attribute Call Attribute Name self Lambda arguments arg v Tuple Name v Constant None Call Attribute Name other Lambda arguments arg v Tuple Name v Constant None Lambda arguments arg k_vs Call Name all Subscript Name k_vs Constant 1
Module FunctionDef arguments arg self arg numPartitions arg partitionFunc arg ascending arg keyfunc Constant None Name portable_hash Constant True Lambda arguments arg x Name x Expr Constant If Compare Name numPartitions Is Constant None Assign Name numPartitions Call Attribute Name self Assign Name memory Call Name _parse_memory Call Attribute Attribute Attribute Name self Constant Constant 512m Assign Name serializer Attribute Name self FunctionDef arguments arg iterator Assign Name sort Attribute Call Name ExternalSorter BinOp Name memory Mult Constant 0.9 Name serializer Return Call Name iter Call Name sort Name iterator keyword Lambda arguments arg k_v Call Name keyfunc Subscript Name k_v Constant 0 keyword UnaryOp Not Name ascending Return Call Attribute Call Attribute Name self Name numPartitions Name partitionFunc Name sortPartition Constant True
Module FunctionDef arguments arg self arg ascending arg numPartitions arg keyfunc Constant True Constant None Lambda arguments arg x Name x Expr Constant If Compare Name numPartitions Is Constant None Assign Name numPartitions Call Attribute Name self Assign Name memory Call Attribute Name self Assign Name serializer Attribute Name self FunctionDef arguments arg iterator Assign Name sort Attribute Call Name ExternalSorter BinOp Name memory Mult Constant 0.9 Name serializer Return Call Name iter Call Name sort Name iterator keyword Lambda arguments arg kv Call Name keyfunc Subscript Name kv Constant 0 keyword UnaryOp Not Name ascending If Compare Name numPartitions Eq Constant 1 If Compare Call Attribute Name self Gt Constant 1 Assign Name self Call Attribute Name self Constant 1 Return Call Attribute Name self Name sortPartition Constant True Assign Name rddSize Call Attribute Name self If UnaryOp Not Name rddSize Return Name self Assign Name maxSampleSize BinOp Name numPartitions Mult Constant 20.0 Assign Name fraction Call Name min BinOp Name maxSampleSize Div Call Name max Name rddSize Constant 1 Constant 1.0 Assign Name samples Call Attribute Call Attribute Call Attribute Name self Constant False Name fraction Constant 1 Lambda arguments arg kv Subscript Name kv Constant 0 Assign Name samples Call Name sorted Name samples keyword Name keyfunc Assign Name bounds ListComp Subscript Name samples Call Name int BinOp BinOp Call Name len Name samples Mult BinOp Name i Add Constant 1 Div Name numPartitions comprehension Name i Call Name range Constant 0 BinOp Name numPartitions Sub Constant 1 FunctionDef arguments arg k Assign Name p Call Attribute Name bisect Name bounds Call Name keyfunc Name k If Name ascending Return Name p Return BinOp BinOp Name numPartitions Sub Constant 1 Sub Name p Return Call Attribute Call Attribute Name self Name numPartitions Name rangePartitioner Name sortPartition Constant True
Module FunctionDef arguments arg self arg keyfunc arg ascending arg numPartitions Constant True Constant None Expr Constant Return Call Attribute Call Attribute Call Attribute Name self Name keyfunc Name ascending Name numPartitions
Module FunctionDef arguments arg self arg other Expr Constant Assign Name deserializer Call Name Attribute Name self Attribute Name other Return Call Name RDD Call Attribute Attribute Name self Attribute Name other Attribute Name self Name deserializer
Module FunctionDef arguments arg self arg f arg numPartitions arg partitionFunc Constant None Name portable_hash Expr Constant Return Call Attribute Call Attribute Name self Lambda arguments arg x Tuple Call Name f Name x Name x Name numPartitions Name partitionFunc
Module FunctionDef arguments arg self arg command arg env arg checkCode Constant None Constant False Expr Constant If Compare Name env Is Constant None Assign Name env Call Name dict FunctionDef arguments arg iterator Assign Name pipe Call Name Popen Call Attribute Name shlex Name command keyword Name env keyword Name PIPE keyword Name PIPE FunctionDef arguments arg out For Name obj Name iterator Assign Name s BinOp Call Attribute Call Name unicode Name obj Constant 
 Add Constant 
 Expr Call Attribute Name out Call Attribute Name s Constant utf-8 Expr Call Attribute Name out Expr Call Attribute Call Name Thread keyword Name pipe_objs keyword List Attribute Name pipe FunctionDef arguments Expr Call Attribute Name pipe If BoolOp And Name checkCode Attribute Name pipe Raise Call Name Exception BinOp Constant Mod Tuple Name command Attribute Name pipe For Name i Call Name range Constant 0 Expr Yield Name i Return GeneratorExp Call Attribute Call Attribute Name x Constant b'\n' Constant utf-8 comprehension Name x Call Name chain Call Name iter Attribute Attribute Name pipe Constant b'' Call Name check_return_code Return Call Attribute Name self Name func
Module FunctionDef arguments arg self arg f Expr Constant Assign Name f Call Name Name f FunctionDef arguments arg iterator For Name x Name iterator Expr Call Name f Name x Return Call Name iter List Expr Call Attribute Call Attribute Name self Name processPartition
Module FunctionDef arguments arg self arg f Expr Constant FunctionDef arguments arg it Assign Name r Call Name f Name it Try Return Call Name iter Name r ExceptHandler Name TypeError Return Call Name iter List Expr Call Attribute Call Attribute Name self Name func
Module FunctionDef arguments arg self Expr Constant With withitem Call Name SCCallSiteSync Attribute Name self Name css Assign Name sock_info Call Attribute Attribute Attribute Attribute Name self Call Attribute Attribute Name self Return Call Name list Call Name _load_from_socket Name sock_info Attribute Name self
Module FunctionDef arguments arg self arg f Expr Constant Assign Name f Call Name Name f FunctionDef arguments arg iterator Assign Name iterator Call Name iter Name iterator Try Assign Name initial Call Name next Name iterator ExceptHandler Name StopIteration Return Expr Yield Call Name reduce Name f Name iterator Name initial Assign Name vals Call Attribute Call Attribute Name self Name func If Name vals Return Call Name reduce Name f Name vals Raise Call Name ValueError Constant
Module FunctionDef arguments arg self arg f arg depth Constant 2 Expr Constant If Compare Name depth Lt Constant 1 Raise Call Name ValueError BinOp Constant Mod Name depth Assign Name zeroValue Tuple Constant None Constant True FunctionDef arguments arg x arg y If Subscript Name x Constant 1 Return Name y If Subscript Name y Constant 1 Return Name x Return Tuple Call Name f Subscript Name x Constant 0 Subscript Name y Constant 0 Constant False Assign Name reduced Call Attribute Call Attribute Name self Lambda arguments arg x Tuple Name x Constant False Name zeroValue Name op Name op Name depth If Subscript Name reduced Constant 1 Raise Call Name ValueError Constant Return Subscript Name reduced Constant 0
Module FunctionDef arguments arg self arg zeroValue arg op Expr Constant Assign Name op Call Name Name op FunctionDef arguments arg iterator Assign Name acc Name zeroValue For Name obj Name iterator Assign Name acc Call Name op Name acc Name obj Expr Yield Name acc Assign Name vals Call Attribute Call Attribute Name self Name func Return Call Name reduce Name op Name vals Name zeroValue
Module FunctionDef arguments arg self arg zeroValue arg seqOp arg combOp Expr Constant Assign Name seqOp Call Name Name seqOp Assign Name combOp Call Name Name combOp FunctionDef arguments arg iterator Assign Name acc Name zeroValue For Name obj Name iterator Assign Name acc Call Name seqOp Name acc Name obj Expr Yield Name acc Assign Name vals Call Attribute Call Attribute Name self Name func Return Call Name reduce Name combOp Name vals Name zeroValue
Module FunctionDef arguments arg self arg zeroValue arg seqOp arg combOp arg depth Constant 2 Expr Constant If Compare Name depth Lt Constant 1 Raise Call Name ValueError BinOp Constant Mod Name depth If Compare Call Attribute Name self Eq Constant 0 Return Name zeroValue FunctionDef arguments arg iterator Assign Name acc Name zeroValue For Name obj Name iterator Assign Name acc Call Name seqOp Name acc Name obj Expr Yield Name acc Assign Name partiallyAggregated Call Attribute Name self Name aggregatePartition Assign Name numPartitions Call Attribute Name partiallyAggregated Assign Name scale Call Name max Call Name int Call Name ceil Call Name pow Name numPartitions BinOp Constant 1.0 Div Name depth Constant 2 While Compare Name numPartitions Gt BinOp Name scale Add BinOp Name numPartitions Div Name scale AugAssign Name numPartitions Div Name scale Assign Name curNumPartitions Call Name int Name numPartitions FunctionDef arguments arg i arg iterator For Name obj Name iterator Expr Yield Tuple BinOp Name i Mod Name curNumPartitions Name obj Assign Name partiallyAggregated Call Attribute Call Attribute Call Attribute Name partiallyAggregated Name mapPartition Name combOp Name curNumPartitions Return Call Attribute Name partiallyAggregated Name combOp
Module FunctionDef arguments arg self arg key Constant None Expr Constant If Compare Name key Is Constant None Return Call Attribute Name self Name max Return Call Attribute Name self Lambda arguments arg a arg b Call Name max Name a Name b keyword Name key
Module FunctionDef arguments arg self arg key Constant None Expr Constant If Compare Name key Is Constant None Return Call Attribute Name self Name min Return Call Attribute Name self Lambda arguments arg a arg b Call Name min Name a Name b keyword Name key
Module FunctionDef arguments arg self Expr Constant Return Call Attribute Call Attribute Name self Lambda arguments arg x List Call Name sum Name x Constant 0 Attribute Name operator
Module FunctionDef arguments arg self Expr Constant FunctionDef arguments arg left_counter arg right_counter Return Call Attribute Name left_counter Name right_counter Return Call Attribute Call Attribute Name self Lambda arguments arg i List Call Name StatCounter Name i Name redFunc
Module FunctionDef arguments arg self arg buckets Expr Constant If Call Name isinstance Name buckets Name int If Compare Name buckets Lt Constant 1 Raise Call Name ValueError Constant FunctionDef arguments arg x If Compare Name x Is Constant None Return Constant False If BoolOp And Compare Call Name type Name x Is Name float Call Name isnan Name x Return Constant False Return Constant True Assign Name filtered Call Attribute Name self Name comparable FunctionDef arguments arg a arg b Return Tuple Call Name min Subscript Name a Constant 0 Subscript Name b Constant 0 Call Name max Subscript Name a Constant 1 Subscript Name b Constant 1 Try Assign Tuple Name minv Name maxv Call Attribute Call Attribute Name filtered Lambda arguments arg x Tuple Name x Name x Name minmax ExceptHandler Name TypeError If Compare Constant  empty  In Call Name str Name e Raise Call Name ValueError Constant Raise If BoolOp Or Compare Name minv Eq Name maxv Compare Name buckets Eq Constant 1 Return Tuple List Name minv Name maxv List Call Attribute Name filtered Try Assign Name inc BinOp BinOp Name maxv Sub Name minv Div Name buckets ExceptHandler Name TypeError Raise Call Name TypeError Constant If Call Name isinf Name inc Raise Call Name ValueError Constant Assign Name inc Call Name int Name inc If Compare BinOp Name inc Mult Name buckets NotEq BinOp Name maxv Sub Name minv Assign Name inc BinOp BinOp BinOp Name maxv Sub Name minv Mult Constant 1.0 Div Name buckets Assign Name buckets ListComp BinOp BinOp Name i Mult Name inc Add Name minv comprehension Name i Call Name range Name buckets Expr Call Attribute Name buckets Name maxv Assign Name even Constant True If Call Name isinstance Name buckets Tuple Name list Name tuple If Compare Call Name len Name buckets Lt Constant 2 Raise Call Name ValueError Constant If Call Name any GeneratorExp BoolOp Or Compare Name i Is Constant None BoolOp And Call Name isinstance Name i Name float Call Name isnan Name i comprehension Name i Name buckets Raise Call Name ValueError Constant If Compare Call Name sorted Name buckets NotEq Call Name list Name buckets Raise Call Name ValueError Constant If Compare Call Name len Call Name set Name buckets NotEq Call Name len Name buckets Raise Call Name ValueError Constant Assign Name minv Subscript Name buckets Constant 0 Assign Name maxv Subscript Name buckets UnaryOp USub Constant 1 Assign Name even Constant False Assign Name inc Constant None Try Assign Name steps ListComp BinOp Subscript Name buckets BinOp Name i Add Constant 1 Sub Subscript Name buckets Name i comprehension Name i Call Name range BinOp Call Name len Name buckets Sub Constant 1 ExceptHandler Name TypeError Pass If Compare BinOp Call Name max Name steps Sub Call Name min Name steps Lt Constant 1e-10 Assign Name even Constant True Assign Name inc BinOp BinOp Name maxv Sub Name minv Div BinOp Call Name len Name buckets Sub Constant 1 Raise Call Name TypeError Constant FunctionDef arguments arg iterator Assign Name counters BinOp List Constant 0 Mult Call Name len Name buckets For Name i Name iterator If BoolOp Or Compare Name i Is Constant None BoolOp And Compare Call Name type Name i Is Name float Call Name isnan Name i Compare Name i Gt Name maxv Compare Name i Lt Name minv Continue Assign Name t IfExp Name even Call Name int BinOp BinOp Name i Sub Name minv Div Name inc BinOp Call Attribute Name bisect Name buckets Name i Sub Constant 1 AugAssign Subscript Name counters Name t Add Constant 1 Assign Name last Call Attribute Name counters AugAssign Subscript Name counters UnaryOp USub Constant 1 Add Name last Return List Name counters FunctionDef arguments arg a arg b Return ListComp BinOp Name i Add Name j comprehension Tuple Name i Name j Call Name zip Name a Name b Return Tuple Name buckets Call Attribute Call Attribute Name self Name histogram Name mergeCounters
Module FunctionDef arguments arg self Expr Constant FunctionDef arguments arg iterator Assign Name counts Call Name defaultdict Name int For Name obj Name iterator AugAssign Subscript Name counts Name obj Add Constant 1 Expr Yield Name counts FunctionDef arguments arg m1 arg m2 For Tuple Name k Name v Call Attribute Name m2 AugAssign Subscript Name m1 Name k Add Name v Return Name m1 Return Call Attribute Call Attribute Name self Name countPartition Name mergeMaps
Module FunctionDef arguments arg self arg num arg key Constant None Expr Constant FunctionDef arguments arg iterator Expr Yield Call Attribute Name heapq Name num Name iterator keyword Name key FunctionDef arguments arg a arg b Return Call Attribute Name heapq Name num BinOp Name a Add Name b keyword Name key Return Call Attribute Call Attribute Name self Name topIterator Name merge
Module FunctionDef arguments arg self arg num arg key Constant None Expr Constant FunctionDef arguments arg a arg b Return Call Attribute Name heapq Name num BinOp Name a Add Name b Name key Return Call Attribute Call Attribute Name self Lambda arguments arg it List Call Attribute Name heapq Name num Name it Name key Name merge
Module FunctionDef arguments arg self arg num Expr Constant Assign Name items List Assign Name totalParts Call Attribute Name self Assign Name partsScanned Constant 0 While BoolOp And Compare Call Name len Name items Lt Name num Compare Name partsScanned Lt Name totalParts Assign Name numPartsToTry Constant 1 If Compare Name partsScanned Gt Constant 0 If Compare Call Name len Name items Eq Constant 0 Assign Name numPartsToTry BinOp Name partsScanned Mult Constant 4 Assign Name numPartsToTry BinOp Call Name int BinOp BinOp BinOp Constant 1.5 Mult Name num Mult Name partsScanned Div Call Name len Name items Sub Name partsScanned Assign Name numPartsToTry Call Name min Call Name max Name numPartsToTry Constant 1 BinOp Name partsScanned Mult Constant 4 Assign Name left BinOp Name num Sub Call Name len Name items FunctionDef arguments arg iterator Assign Name iterator Call Name iter Name iterator Assign Name taken Constant 0 While Compare Name taken Lt Name left Try Expr Yield Call Name next Name iterator ExceptHandler Name StopIteration Return AugAssign Name taken Add Constant 1 Assign Name p Call Name range Name partsScanned Call Name min BinOp Name partsScanned Add Name numPartsToTry Name totalParts Assign Name res Call Attribute Attribute Name self Name self Name takeUpToNumLeft Name p AugAssign Name items Add Name res AugAssign Name partsScanned Add Name numPartsToTry Return Subscript Name items Slice Name num
Module FunctionDef arguments arg self arg conf arg keyConverter arg valueConverter Constant None Constant None Expr Constant Assign Name jconf Call Attribute Attribute Name self Name conf Assign Name pickledRDD Call Attribute Name self Expr Call Attribute Attribute Attribute Attribute Name self Attribute Name pickledRDD Constant True Name jconf Name keyConverter Name valueConverter Constant True
Module FunctionDef arguments arg self arg path arg outputFormatClass arg keyClass arg valueClass arg keyConverter arg valueConverter arg conf Constant None Constant None Constant None Constant None Constant None Expr Constant Assign Name jconf Call Attribute Attribute Name self Name conf Assign Name pickledRDD Call Attribute Name self Expr Call Attribute Attribute Attribute Attribute Name self Attribute Name pickledRDD Constant True Name path Name outputFormatClass Name keyClass Name valueClass Name keyConverter Name valueConverter Name jconf
Module FunctionDef arguments arg self arg path arg Constant None Expr Constant Assign Name pickledRDD Call Attribute Name self Expr Call Attribute Attribute Attribute Attribute Name self Attribute Name pickledRDD Constant True Name path Name
Module FunctionDef arguments arg self arg path arg batchSize Constant 10 Expr Constant If Compare Name batchSize Eq Constant 0 Assign Name ser Call Name Call Name PickleSerializer Assign Name ser Call Name BatchedSerializer Call Name PickleSerializer Name batchSize Expr Call Attribute Attribute Call Attribute Name self Name ser Name path
Module FunctionDef arguments arg self arg path arg Constant None Expr Constant FunctionDef arguments arg split arg iterator For Name x Name iterator If UnaryOp Not Call Name isinstance Name x Tuple Name unicode Name bytes Assign Name x Call Name unicode Name x If Call Name isinstance Name x Name unicode Assign Name x Call Attribute Name x Constant utf-8 Expr Yield Name x Assign Name keyed Call Attribute Name self Name func Assign Attribute Name keyed Constant True If Name Assign Name compressionCodec Call Attribute Attribute Attribute Attribute Attribute Attribute Name self Name Expr Call Attribute Call Attribute Attribute Name keyed Call Attribute Attribute Attribute Name self Name path Name compressionCodec Expr Call Attribute Call Attribute Attribute Name keyed Call Attribute Attribute Attribute Name self Name path
Module FunctionDef arguments arg self arg func arg numPartitions arg partitionFunc Constant None Name portable_hash Expr Constant Return Call Attribute Name self Lambda arguments arg x Name x Name func Name func Name numPartitions Name partitionFunc
Module FunctionDef arguments arg self arg func Expr Constant Assign Name func Call Name Name func FunctionDef arguments arg iterator Assign Name m Dict For Tuple Name k Name v Name iterator Assign Subscript Name m Name k IfExp Compare Name k In Name m Call Name func Subscript Name m Name k Name v Name v Expr Yield Name m FunctionDef arguments arg m1 arg m2 For Tuple Name k Name v Call Attribute Name m2 Assign Subscript Name m1 Name k IfExp Compare Name k In Name m1 Call Name func Subscript Name m1 Name k Name v Name v Return Name m1 Return Call Attribute Call Attribute Name self Name reducePartition Name mergeMaps
Module FunctionDef arguments arg self arg numPartitions arg partitionFunc Name portable_hash Expr Constant If Compare Name numPartitions Is Constant None Assign Name numPartitions Call Attribute Name self Assign Name partitioner Call Name Partitioner Name numPartitions Name partitionFunc If Compare Attribute Name self Eq Name partitioner Return Name self Assign Name outputSerializer Attribute Attribute Name self Assign Name limit BinOp Call Name _parse_memory Call Attribute Attribute Attribute Name self Constant Constant 512m Div Constant 2 FunctionDef arguments arg split arg iterator Assign Name buckets Call Name defaultdict Name list Assign Tuple Name c Name batch Tuple Constant 0 Call Name min BinOp Constant 10 Mult Name numPartitions Constant 1000 For Tuple Name k Name v Name iterator Expr Call Attribute Subscript Name buckets BinOp Call Name partitionFunc Name k Mod Name numPartitions Tuple Name k Name v AugAssign Name c Add Constant 1 If BoolOp Or BoolOp And Compare BinOp Name c Mod Constant 1000 Eq Constant 0 Compare Call Name get_used_memory Gt Name limit Compare Name c Gt Name batch Assign Tuple Name n Name size Tuple Call Name len Name buckets Constant 0 For Name split Call Name list Call Attribute Name buckets Expr Yield Call Name pack_long Name split Assign Name d Call Attribute Name outputSerializer Subscript Name buckets Name split Delete Subscript Name buckets Name split Del Expr Yield Name d AugAssign Name size Add Call Name len Name d Assign Name avg BinOp Call Name int BinOp Name size Div Name n RShift Constant 20 If Compare Name avg Lt Constant 1 AugAssign Name batch Mult Constant 1.5 If Compare Name avg Gt Constant 10 Assign Name batch Call Name max Call Name int BinOp Name batch Div Constant 1.5 Constant 1 Assign Name c Constant 0 For Tuple Name split Name items Call Attribute Name buckets Expr Yield Call Name pack_long Name split Expr Yield Call Attribute Name outputSerializer Name items Assign Name keyed Call Attribute Name self Name add_shuffle_key keyword Constant True Assign Attribute Name keyed Constant True With withitem Call Name SCCallSiteSync Attribute Name self Name css Assign Name pairRDD Call Attribute Call Attribute Attribute Attribute Name self Call Attribute Attribute Name keyed Assign Name jpartitioner Call Attribute Attribute Attribute Name self Name numPartitions Call Name id Name partitionFunc Assign Name jrdd Call Attribute Attribute Attribute Attribute Name self Call Attribute Name pairRDD Name jpartitioner Assign Name rdd Call Name RDD Name jrdd Attribute Name self Call Name BatchedSerializer Name outputSerializer Assign Attribute Name rdd Name partitioner Return Name rdd
Module FunctionDef arguments arg self arg createCombiner arg mergeValue arg mergeCombiners arg numPartitions arg partitionFunc Constant None Name portable_hash Expr Constant If Compare Name numPartitions Is Constant None Assign Name numPartitions Call Attribute Name self Assign Name serializer Attribute Attribute Name self Assign Name memory Call Attribute Name self Assign Name agg Call Name Aggregator Name createCombiner Name mergeValue Name mergeCombiners FunctionDef arguments arg iterator Assign Name merger Call Name ExternalMerger Name agg BinOp Name memory Mult Constant 0.9 Name serializer Expr Call Attribute Name merger Name iterator Return Call Attribute Name merger Assign Name locally_combined Call Attribute Name self Name combineLocally keyword Constant True Assign Name shuffled Call Attribute Name locally_combined Name numPartitions Name partitionFunc FunctionDef arguments arg iterator Assign Name merger Call Name ExternalMerger Name agg Name memory Name serializer Expr Call Attribute Name merger Name iterator Return Call Attribute Name merger Return Call Attribute Name shuffled Name _mergeCombiners keyword Constant True
Module FunctionDef arguments arg self arg zeroValue arg seqFunc arg combFunc arg numPartitions arg partitionFunc Constant None Name portable_hash Expr Constant FunctionDef arguments Return Call Attribute Name copy Name zeroValue Return Call Attribute Name self Lambda arguments arg v Call Name seqFunc Call Name createZero Name v Name seqFunc Name combFunc Name numPartitions Name partitionFunc
Module FunctionDef arguments arg self arg zeroValue arg func arg numPartitions arg partitionFunc Constant None Name portable_hash Expr Constant FunctionDef arguments Return Call Attribute Name copy Name zeroValue Return Call Attribute Name self Lambda arguments arg v Call Name func Call Name createZero Name v Name func Name func Name numPartitions Name partitionFunc
