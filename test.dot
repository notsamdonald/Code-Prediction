digraph tree {
    "0x1a23bcd6070" [label="Module"];
    "0x1a23bcd6af0" [label="FunctionDef"];
    "0x1a23bcd60d0" [label="arguments"];
    "0x1a23bcd67f0" [label="arg"];
    "0x1a23bcd6280" [label="self"];
    "0x1a23bcd63a0" [label="arg"];
    "0x1a23bcd6850" [label="zeroValue"];
    "0x1a23bcd6d60" [label="arg"];
    "0x1a23bcd64c0" [label="func"];
    "0x1a23bcd6a90" [label="arg"];
    "0x1a23bcd6730" [label="numPartitions"];
    "0x1a23bcd6490" [label="arg"];
    "0x1a23bcd6e80" [label="partitionFunc"];
    "0x1a23bcd68e0" [label="Constant"];
    "0x1a23bcd66a0" [label="None"];
    "0x1a23bcd62e0" [label="Name"];
    "0x1a23bcd6100" [label="portable_hash"];
    "0x1a23bcd6370" [label="Expr"];
    "0x1a23bcd6d30" [label="Constant"];
    "0x1a23bcd6340" [label="
        Merge the values for each key using an associative function "func"
        and a neutral "zeroValue" which may be added to the result an
        arbitrary number of times, and must not change the result
        (e.g., 0 for addition, or 1 for multiplication.).

        >>> rdd = sc.parallelize([("a", 1), ("b", 1), ("a", 1)])
        >>> from operator import add
        >>> sorted(rdd.foldByKey(0, add).collect())
        [('a', 2), ('b', 1)]
        "];
    "0x1a23bcd6e50" [label="FunctionDef"];
    "0x1a23bcd6ac0" [label="arguments"];
    "0x1a23bcd69d0" [label="Return"];
    "0x1a23bcd6880" [label="Call"];
    "0x1a23bcd6670" [label="Attribute"];
    "0x1a23bcdffd0" [label="Name"];
    "0x1a23bcdf850" [label="copy"];
    "0x1a23bcdf310" [label="Name"];
    "0x1a23bcdfe20" [label="zeroValue"];
    "0x1a23bcd6b80" [label="Return"];
    "0x1a23bcd6220" [label="Call"];
    "0x1a23bd15250" [label="Attribute"];
    "0x1a23bcdf6a0" [label="Name"];
    "0x1a23bcdf040" [label="self"];
    "0x1a23bcdfa90" [label="Lambda"];
    "0x1a23bcdf940" [label="arguments"];
    "0x1a23bcdfcd0" [label="arg"];
    "0x1a23bcdf2e0" [label="v"];
    "0x1a23bcdf7f0" [label="Call"];
    "0x1a23bcdfdf0" [label="Name"];
    "0x1a23bcdfb50" [label="func"];
    "0x1a23bcdf5e0" [label="Call"];
    "0x1a23bcdffa0" [label="Name"];
    "0x1a23bcdfd60" [label="createZero"];
    "0x1a23bcdfd30" [label="Name"];
    "0x1a23bcdf550" [label="v"];
    "0x1a23bcdf8b0" [label="Name"];
    "0x1a23bcdfb80" [label="func"];
    "0x1a23bcdf370" [label="Name"];
    "0x1a23bcdf070" [label="func"];
    "0x1a23bcdfe50" [label="Name"];
    "0x1a23bcdf9a0" [label="numPartitions"];
    "0x1a23bcdfee0" [label="Name"];
    "0x1a23bcdf820" [label="partitionFunc"];
    "0x1a23bcd6070" -> "0x1a23bcd6af0";
    "0x1a23bcd6af0" -> "0x1a23bcd60d0";
    "0x1a23bcd6af0" -> "0x1a23bcd6370";
    "0x1a23bcd6af0" -> "0x1a23bcd6e50";
    "0x1a23bcd6af0" -> "0x1a23bcd6b80";
    "0x1a23bcd60d0" -> "0x1a23bcd67f0";
    "0x1a23bcd60d0" -> "0x1a23bcd63a0";
    "0x1a23bcd60d0" -> "0x1a23bcd6d60";
    "0x1a23bcd60d0" -> "0x1a23bcd6a90";
    "0x1a23bcd60d0" -> "0x1a23bcd6490";
    "0x1a23bcd60d0" -> "0x1a23bcd68e0";
    "0x1a23bcd60d0" -> "0x1a23bcd62e0";
    "0x1a23bcd67f0" -> "0x1a23bcd6280";
    "0x1a23bcd63a0" -> "0x1a23bcd6850";
    "0x1a23bcd6d60" -> "0x1a23bcd64c0";
    "0x1a23bcd6a90" -> "0x1a23bcd6730";
    "0x1a23bcd6490" -> "0x1a23bcd6e80";
    "0x1a23bcd68e0" -> "0x1a23bcd66a0";
    "0x1a23bcd62e0" -> "0x1a23bcd6100";
    "0x1a23bcd6370" -> "0x1a23bcd6d30";
    "0x1a23bcd6d30" -> "0x1a23bcd6340";
    "0x1a23bcd6e50" -> "0x1a23bcd6ac0";
    "0x1a23bcd6e50" -> "0x1a23bcd69d0";
    "0x1a23bcd69d0" -> "0x1a23bcd6880";
    "0x1a23bcd6880" -> "0x1a23bcd6670";
    "0x1a23bcd6880" -> "0x1a23bcdf310";
    "0x1a23bcd6670" -> "0x1a23bcdffd0";
    "0x1a23bcdffd0" -> "0x1a23bcdf850";
    "0x1a23bcdf310" -> "0x1a23bcdfe20";
    "0x1a23bcd6b80" -> "0x1a23bcd6220";
    "0x1a23bcd6220" -> "0x1a23bd15250";
    "0x1a23bcd6220" -> "0x1a23bcdfa90";
    "0x1a23bcd6220" -> "0x1a23bcdf8b0";
    "0x1a23bcd6220" -> "0x1a23bcdf370";
    "0x1a23bcd6220" -> "0x1a23bcdfe50";
    "0x1a23bcd6220" -> "0x1a23bcdfee0";
    "0x1a23bd15250" -> "0x1a23bcdf6a0";
    "0x1a23bcdf6a0" -> "0x1a23bcdf040";
    "0x1a23bcdfa90" -> "0x1a23bcdf940";
    "0x1a23bcdfa90" -> "0x1a23bcdf7f0";
    "0x1a23bcdf940" -> "0x1a23bcdfcd0";
    "0x1a23bcdfcd0" -> "0x1a23bcdf2e0";
    "0x1a23bcdf7f0" -> "0x1a23bcdfdf0";
    "0x1a23bcdf7f0" -> "0x1a23bcdf5e0";
    "0x1a23bcdf7f0" -> "0x1a23bcdfd30";
    "0x1a23bcdfdf0" -> "0x1a23bcdfb50";
    "0x1a23bcdf5e0" -> "0x1a23bcdffa0";
    "0x1a23bcdffa0" -> "0x1a23bcdfd60";
    "0x1a23bcdfd30" -> "0x1a23bcdf550";
    "0x1a23bcdf8b0" -> "0x1a23bcdfb80";
    "0x1a23bcdf370" -> "0x1a23bcdf070";
    "0x1a23bcdfe50" -> "0x1a23bcdf9a0";
    "0x1a23bcdfee0" -> "0x1a23bcdf820";
}
